// Types
import type { TetrominoType, TetrominoShape, Tetromino, TetrominoColor } from "./types.js";

// All shapes in a 4x4 grid, 1 = block, 0 = empty
export const TETROMINO_SHAPES: Record<TetrominoType, TetrominoShape[]> = {
    I: [
        [
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 1, 0],
        ],
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
        ],
    ],
    O: [
        [
            [0, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        // O-Block does not change shape on rotation
        [
            [0, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
    T: [
        [
            [0, 1, 0, 0],
            [1, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 0, 0],
            [1, 1, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [1, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
    S: [
        [
            [0, 1, 1, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 0, 0],
            [0, 1, 1, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [1, 0, 0, 0],
            [1, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
    Z: [
        [
            [1, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 1, 0],
            [0, 1, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 0, 0],
            [1, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [1, 1, 0, 0],
            [1, 0, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
    J: [
        [
            [1, 0, 0, 0],
            [1, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 1, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 0, 0],
            [1, 1, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
    L: [
        [
            [0, 0, 1, 0],
            [1, 1, 1, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 0, 0],
            [1, 1, 1, 0],
            [1, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [1, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
        ],
    ],
};

export const TETROMINO_COLORS: Record<TetrominoType, TetrominoColor> = {
    I: '#00f0f0', // Cyan
    O: '#f0f000', // Yellow
    T: '#a000f0', // Lilac
    S: '#00f000', // Green
    Z: '#f00000', // Red
    J: '#0000f0', // Blue
    L: '#f0a000', // Orange
};

// SRS wallkicks for standard tetrominos (J, L, S, T, Z)
export const SRS_WALLKICKS: { [key: string]: [number, number][] } = {
    "0>R": [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]],
    "R>0": [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
    "R>2": [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
    "2>R": [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]],
    "2>L": [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
    "L>2": [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]],
    "L>0": [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]],
    "0>L": [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
};

// SRS wallkicks for I tetromino
export const SRS_WALLKICKS_I: { [key: string]: [number, number][] } = {
    "0>R": [[0, 0], [-2, 0], [1, 0], [-2, -1], [1, 2]],
    "R>0": [[0, 0], [2, 0], [-1, 0], [2, 1], [-1, -2]],
    "R>2": [[0, 0], [-1, 0], [2, 0], [-1, 2], [2, -1]],
    "2>R": [[0, 0], [1, 0], [-2, 0], [1, -2], [-2, 1]],
    "2>L": [[0, 0], [2, 0], [-1, 0], [2, 1], [-1, -2]],
    "L>2": [[0, 0], [-2, 0], [1, 0], [-2, -1], [1, 2]],
    "L>0": [[0, 0], [1, 0], [-2, 0], [1, -2], [-2, 1]],
    "0>L": [[0, 0], [-1, 0], [2, 0], [-1, 2], [2, -1]],
};

// Index = number of lines cleared
export const SCORE_TABLE = [0, 100, 300, 500, 800];

export const SOFT_DROP_SCORE = 1;
export const HARD_DROP_SCORE = 2;

export const DROP_INTERVALS = [
    800,  // Level 0
    717,  // Level 1
    633,  // Level 2
    550,  // Level 3
    467,  // Level 4
    383,  // Level 5
    300,  // Level 6
    217,  // Level 7
    133,  // Level 8
    100,  // Level 9
    83,  // Level 10
    83,  // Level 11
    83,  // Level 12
    67,  // Level 13
    67,  // Level 14
    67,  // Level 15
    50,  // Level 16
    50,  // Level 17
    50,  // Level 18
    33,  // Level 19
    33,  // Level 20
    33,  // Level 21
    33,  // Level 22
    33,  // Level 23
    33,  // Level 24
    33,  // Level 25
    33,  // Level 26
    33,  // Level 27
    33,  // Level 28
    17,  // Level 29+
];
